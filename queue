#include <iostream>
using namespace std;

class Queue {
private:
    int* a;
    int front;
    int rear;
    int size;
    int count;

public:
    Queue(int size) {
        this->size = size;
        this->a = new int[size];
        this->front = 0;
        this->rear = -1;
        this->count = 0;
    }

    void enqueue(int value) {
        if (count >= size) {
            cout << "Queue Overflow" << endl;
        } else {
            rear = (rear + 1) % size;
            a[rear] = value;
            count++;
        }
    }

    int dequeue() {
        if (count == 0) {
            cout << "Queue Underflow" << endl;
            return -1;
        } else {
            int value = a[front];
            front = (front + 1) % size;
            count--;
            return value;
        }
    }

    int frontValue() {
        if (count == 0) {
            cout << "Queue is empty" << endl;
            return -1;
        } else {
            return a[front];
        }
    }

    void display() {
        if (count == 0) {
            cout << "Queue is empty" << endl;
        } else {
            int i = front;
            for (int j = 0; j < count; j++) {
                cout << a[i] << " ";
                i = (i + 1) % size;
            }
            cout << endl;
        }
    }

    ~Queue() {
        delete[] a;
    }
};

int main() {
    int size;
    cout << "Enter the size of the queue: ";
    cin >> size;
    Queue queue(size);

    while (true) {
        cout << "\n1. Enqueue\n2. Dequeue\n3. Front\n4. Display\n5. Exit" << endl;
        cout << "Enter your choice: ";
        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                int value;
                cout << "Enter value to enqueue: ";
                cin >> value;
                queue.enqueue(value);
                break;
            case 2:
                cout << "Dequeued: " << queue.dequeue() << endl;
                break;
            case 3:
                cout << "Front: " << queue.frontValue() << endl;
                break;
            case 4:
                queue.display();
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
}
