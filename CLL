class Node:
    def __init__(self, value):
        self.data = value
        self.next = None

class CLL:
    def __init__(self):
        self.head = None

    def create(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            new_node.next = self.head
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head

    def insert_at_beginning(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            new_node.next = self.head
        else:
            new_node.next = self.head
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            self.head = new_node

    def insert_before(self, value, element):
        if self.head is None:
            print("The list is empty.")
            return

        new_node = Node(value)
        temp = self.head

        if self.head.data == element:
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head
            self.head = new_node
            return

        prev = None
        while temp.next != self.head and temp.data != element:
            prev = temp
            temp = temp.next

        if temp.data == element:
            prev.next = new_node
            new_node.next = temp
        else:
            print("Element not found.")

    def insert_after(self, value, element):
        if self.head is None:
            print("The list is empty.")
            return

        new_node = Node(value)
        temp = self.head
        while temp.next != self.head and temp.data != element:
            temp = temp.next

        if temp.data == element:
            new_node.next = temp.next
            temp.next = new_node
        else:
            print("Element not found.")

    def insert_at_end(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            new_node.next = self.head
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
            new_node.next = self.head

    def delete_at_first(self):
        if self.head is None:
            print("The list is empty.")
            return

        if self.head.next == self.head:
            self.head = None
        else:
            temp = self.head
            while temp.next != self.head:
                temp = temp.next
            temp.next = self.head.next
            self.head = temp.next

    def delete_at_specified(self, value):
        if self.head is None:
            print("The list is empty.")
            return

        if self.head.data == value and self.head.next == self.head:
            self.head = None
            return

        temp = self.head
        prev = None
        while temp.next != self.head and temp.data != value:
            prev = temp
            temp = temp.next

        if temp.data == value:
            if temp == self.head:
                while temp.next != self.head:
                    temp = temp.next
                temp.next = self.head.next
                self.head = self.head.next
            else:
                prev.next = temp.next
        else:
            print("Element not found.")

    def delete_at_last(self):
        if self.head is None:
            print("The list is empty.")
            return

        if self.head.next == self.head:
            self.head = None
            return

        temp = self.head
        prev = None
        while temp.next != self.head:
            prev = temp
            temp = temp.next
        prev.next = self.head

    def find(self, value):
        if self.head is None:
            print("The list is empty.")
            return False

        temp = self.head
        while True:
            if temp.data == value:
                return True
            temp = temp.next
            if temp == self.head:
                break
        return False

    def display(self):
        if self.head is None:
            print("The list is empty.")
            return
        temp = self.head
        while True:
            print(temp.data, end=" ")
            temp = temp.next
            if temp == self.head:
                break
        print()

if __name__ == "__main__":
    cll = CLL()
    while True:
        print("1. Create the list \n2. Insert at beginning \n3. Insert before element \n4. Insert after element \n5. Insert at end \n6. Display the list \n7. Delete first element \n8. Delete specified element \n9. Delete last element \n10. Find element \n11. Exit")
        choice = int(input())
        if choice == 1:
            value = int(input("Enter the element: "))
            cll.create(value)
        elif choice == 2:
            value = int(input("Enter the value to insert at beginning: "))
            cll.insert_at_beginning(value)
        elif choice == 3:
            value = int(input("Enter the value to insert: "))
            element = int(input("Enter the element before which to insert: "))
            cll.insert_before(value, element)
        elif choice == 4:
            value = int(input("Enter the value to insert: "))
            element = int(input("Enter the element after which to insert: "))
            cll.insert_after(value, element)
        elif choice == 5:
            value = int(input("Enter the value to insert at end: "))
            cll.insert_at_end(value)
        elif choice == 6:
            cll.display()
        elif choice == 7:
            cll.delete_at_first()
        elif choice == 8:
            value = int(input("Enter the value to delete: "))
            cll.delete_at_specified(value)
        elif choice == 9:
            cll.delete_at_last()
        elif choice == 10:
            value = int(input("Enter the value to find: "))
            if cll.find(value):
                print("Element found.")
            else:
                print("Element not found.")
        elif choice == 11:
            break
