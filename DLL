#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = nullptr;
        prev = nullptr;
    }
};

class DLL {
public:
    Node* head;

    DLL() {
        head = nullptr;
    }

    void create(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
        }
    }

    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }

    void insertBefore(int value, int element) {
        if (head == nullptr) {
            cout << "The list is empty." << endl;
            return;
        }

        Node* newNode = new Node(value);
        Node* temp = head;

        while (temp != nullptr && temp->data != element) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Element not found." << endl;
        } else {
            newNode->next = temp;
            newNode->prev = temp->prev;
            if (temp->prev != nullptr) {
                temp->prev->next = newNode;
            } else {
                head = newNode;
            }
            temp->prev = newNode;
        }
    }

    void insertAfter(int value, int element) {
        if (head == nullptr) {
            cout << "The list is empty." << endl;
            return;
        }

        Node* newNode = new Node(value);
        Node* temp = head;

        while (temp != nullptr && temp->data != element) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Element not found." << endl;
        } else {
            newNode->next = temp->next;
            newNode->prev = temp;
            if (temp->next != nullptr) {
                temp->next->prev = newNode;
            }
            temp->next = newNode;
        }
    }

    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
        }
    }

    void deleteAtFirst() {
        if (head == nullptr) {
            cout << "The list is empty." << endl;
        } else {
            head = head->next;
            if (head != nullptr) {
                head->prev = nullptr;
            }
        }
    }

    void deleteAtSpecified(int value) {
        if (head == nullptr) {
            cout << "The list is empty." << endl;
            return;
        }

        Node* temp = head;

        while (temp != nullptr && temp->data != value) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Element not found." << endl;
        } else {
            if (temp->prev != nullptr) {
                temp->prev->next = temp->next;
            } else {
                head = temp->next;
            }

            if (temp->next != nullptr) {
                temp->next->prev = temp->prev;
            }
        }
    }

    void deleteAtLast() {
        if (head == nullptr) {
            cout << "The list is empty." << endl;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            if (temp->prev != nullptr) {
                temp->prev->next = nullptr;
            } else {
                head = nullptr;
            }
        }
    }

    bool find(int value) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == value) {
                return true;
            }
            temp = temp->next;
        }
        return false;
    }

    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DLL dll;
    int choice, value, element;
    while (true) {
        cout << "1. Create the list \n2. Insert at beginning \n3. Insert before element \n4. Insert after element \n5. Insert at end \n6. Display the list \n7. Delete first element \n8. Delete specified element \n9. Delete last element \n10. Find element \n11. Exit" << endl;
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter the element: ";
                cin >> value;
                dll.create(value);
                break;
            case 2:
                cout << "Enter the value to insert at beginning: ";
                cin >> value;
                dll.insertAtBeginning(value);
                break;
            case 3:
                cout << "Enter the value to insert: ";
                cin >> value;
                cout << "Enter the element before which to insert: ";
                cin >> element;
                dll.insertBefore(value, element);
                break;
            case 4:
                cout << "Enter the value to insert: ";
                cin >> value;
                cout << "Enter the element after which to insert: ";
                cin >> element;
                dll.insertAfter(value, element);
                break;
            case 5:
                cout << "Enter the value to insert at end: ";
                cin >> value;
                dll.insertAtEnd(value);
                break;
            case 6:
                dll.display();
                break;
            case 7:
                dll.deleteAtFirst();
                break;
            case 8:
                cout << "Enter the value to delete: ";
                cin >> value;
                dll.deleteAtSpecified(value);
                break;
            case 9:
                dll.deleteAtLast();
                break;
            case 10:
                cout << "Enter the value to find: ";
                cin >> value;
                if (dll.find(value)) {
                    cout << "Element found." << endl;
                } else {
                    cout << "Element not found." << endl;
                }
                break;
            case 11:
                return 0;
        }
    }
}
