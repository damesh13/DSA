class Node:
    def __init__(self, value):
        self.data = value
        self.next = None
        self.prev = None

class DCLL:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.head.next = self.head
            self.head.prev = self.head
        else:
            tail = self.head.prev
            new_node.next = self.head
            new_node.prev = tail
            tail.next = new_node
            self.head.prev = new_node
            self.head = new_node

    def insert_at_end(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.head.next = self.head
            self.head.prev = self.head
        else:
            tail = self.head.prev
            new_node.next = self.head
            new_node.prev = tail
            tail.next = new_node
            self.head.prev = new_node

    def insert_before(self, value, element):
        if self.head is None:
            print("The list is empty.")
            return
        new_node = Node(value)
        temp = self.head
        while temp.data != element:
            temp = temp.next
            if temp == self.head:
                print("Element not found.")
                return
        new_node.next = temp
        new_node.prev = temp.prev
        temp.prev.next = new_node
        temp.prev = new_node
        if temp == self.head:
            self.head = new_node

    def insert_after(self, value, element):
        if self.head is None:
            print("The list is empty.")
            return
        new_node = Node(value)
        temp = self.head
        while temp.data != element:
            temp = temp.next
            if temp == self.head:
                print("Element not found.")
                return
        new_node.next = temp.next
        new_node.prev = temp
        temp.next.prev = new_node
        temp.next = new_node

    def delete_at_beginning(self):
        if self.head is None:
            return
        if self.head.next == self.head:
            self.head = None
        else:
            tail = self.head.prev
            self.head = self.head.next
            self.head.prev = tail
            tail.next = self.head

    def delete_at_end(self):
        if self.head is None:
            return
        if self.head.next == self.head:
            self.head = None
        else:
            tail = self.head.prev
            tail.prev.next = self.head
            self.head.prev = tail.prev

    def delete_at_specified(self, value):
        if self.head is None:
            print("The list is empty.")
            return
        temp = self.head
        while temp.data != value:
            temp = temp.next
            if temp == self.head:
                print("Element not found.")
                return
        if temp.next == temp:
            self.head = None
        else:
            temp.prev.next = temp.next
            temp.next.prev = temp.prev
            if temp == self.head:
                self.head = temp.next

    def find(self, value):
        if self.head is None:
            return False
        temp = self.head
        while True:
            if temp.data == value:
                return True
            temp = temp.next
            if temp == self.head:
                break
        return False

    def display_forward(self):
        if self.head is None:
            print("List is empty")
            return
        temp = self.head
        while True:
            print(temp.data, end=" ")
            temp = temp.next
            if temp == self.head:
                break
        print()

    def display_backward(self):
        if self.head is None:
            print("List is empty")
            return
        temp = self.head.prev
        while True:
            print(temp.data, end=" ")
            temp = temp.prev
            if temp.next == self.head.prev:
                break
        print()

dcll = DCLL()
while True:
    choice = int(input("1. Insert at beginning \n2. Insert at end \n3. Insert before element \n4. Insert after element \n5. Delete first element \n6. Delete last element \n7. Delete specified element \n8. Display forward \n9. Display backward \n10. Find element \n11. Exit\n"))
    if choice == 1:
        value = int(input("Enter the value to insert at beginning: "))
        dcll.insert_at_beginning(value)
    elif choice == 2:
        value = int(input("Enter the value to insert at end: "))
        dcll.insert_at_end(value)
    elif choice == 3:
        value = int(input("Enter the value to insert: "))
        element = int(input("Enter the element before which to insert: "))
        dcll.insert_before(value, element)
    elif choice == 4:
        value = int(input("Enter the value to insert: "))
        element = int(input("Enter the element after which to insert: "))
        dcll.insert_after(value, element)
    elif choice == 5:
        dcll.delete_at_beginning()
    elif choice == 6:
        dcll.delete_at_end()
    elif choice == 7:
        value = int(input("Enter the value to delete: "))
        dcll.delete_at_specified(value)
    elif choice == 8:
        dcll.display_forward()
    elif choice == 9:
        dcll.display_backward()
    elif choice == 10:
        value = int(input("Enter the value to find: "))
        if dcll.find(value):
            print("Element found.")
        else:
            print("Element not found.")
    elif choice == 11:
        break
